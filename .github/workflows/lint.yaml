name: lint

on:
  push:
  release:
  pull_request:

env:
  POETRY_HOME: /opt/poetry
  POETRY_CACHE: /opt/poetry_cache

jobs:

  lint_publish:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Cache deps install
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.POETRY_HOME }}
            ${{ env.POETRY_CACHE }}
          key: cachepoetry-${{ hashFiles('poetry.lock', '.github/workflows/**') }}
      - name: Install poetry
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          python3 -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install poetry
      - name: Fix github path
        run: |
          echo "$POETRY_HOME/bin" >> "$GITHUB_PATH"
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
          poetry config cache-dir $POETRY_CACHE
          poetry config virtualenvs.path $POETRY_CACHE/venv
      - name: Install requirements
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          poetry install
      - name: Run lint
        run: |
          poetry run poe lint
      - name: Run tests / coverage
        run: |
          poetry run poe coverage
      - name: Make docs
        run: |
          poetry run poe docs
      - name: Upload API doc as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: apidoc
          path: apihtml/
      - name: Upload PUBLIC doc as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: publicdoc
          path: html/
      - name: Upload COVERAGE as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: htmlcov/
      - name: Publish on Pypi
        if: github.event_name == 'release' && github.event.action == 'created'
        run: |
          poetry run python change_version.py
          poetry config pypi-token.pypi "${{ secrets.PYPI_TOKEN }}"
          poetry build
          poetry publish
          poetry run python restore_version.py

  githubpages:
    runs-on: ubuntu-latest
    needs: lint_publish
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: true
    environment:
      name: github-pages
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps: 
      - name: Download API doc artifact
        uses: actions/download-artifact@v3
        with:
          name: apidoc
      - name: Download API doc artifact
        uses: actions/download-artifact@v3
        with:
          name: publicdoc
      - name: Download COVERAGE artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1


